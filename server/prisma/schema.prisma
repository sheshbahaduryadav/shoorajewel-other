datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

// User model, representing both customers and vendors
model User {
  id                   String           @id @unique @default(uuid())
  fullName             String
  gender               String
  dob                  DateTime         @db.Date
  phone                String           @unique
  email                String           @unique
  houseNo              String?
  street               String?
  landmark             String?
  pincode              Int?
  city                 String?
  state                String?
  password             String
  refreshToken         String?
  resetToken           String?          @unique
  passwordResetExpires DateTime?
  resetTokenExpiry     DateTime?        @default(now())
  isActive             Boolean          @default(true)
  roles                Role[]
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  // Relation to Vendor model for vendors
  Vendor               Vendor[]
  permitedRoutes       permitedRoutes[]
  department           department?      @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  departmentId         String?
}

model Role {
  id           String      @id @unique @default(uuid())
  name         String
  rank         Int
  roleId       String
  department   department? @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  departmentId String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  users        User[]
}

model department {
  id             String   @id @unique @default(uuid())
  depName        String
  depId          String
  depCode        String
  User           User[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  organizationId String?
  role           Role[]
  targetId       String?
}

model permitedRoutes {
  id        String   @id @unique @default(uuid())
  routeName String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Customer model
model Customer {
  id               String             @id @unique @default(uuid())
  fullName         String
  email            String             @unique
  phone            String             @unique
  password         String
  gender           String?
  dob              DateTime?          @db.Date
  address          String?
  houseNo          String?
  street           String?
  landmark         String?
  pincode          Int?
  city             String?
  state            String?
  savedCard        String?
  myCoupons        String?
  reviews          String?
  rating           Float?
  bankDetails      String?
  refreshToken     String?
  resetToken       String?            @unique
  resetTokenExpiry DateTime?          @default(now())
  isActive         Boolean            @default(true)
  mycart           MyCart[]
  myorder          MyOrder[]
  profileImage     String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  BillingAddresses BillingAddresses[]
  ShippingAddress  ShippingAddress[]
}

// Vendor model
model Vendor {
  id                   String             @id @unique @default(uuid())
  vendorName           String
  gender               String
  dob                  DateTime           @db.Date
  vendorPhone          String             @unique
  vendorEmail          String             @unique
  houseNo              String?
  street               String?
  landmark             String?
  pincode              Int?
  city                 String?
  state                String?
  password             String
  gstNo                String?
  refreshToken         String?
  resetToken           String?            @unique
  passwordResetExpires DateTime?
  resetTokenExpiry     DateTime?          @default(now())
  isActive             Boolean            @default(true)
  // Relation to VendorShop model
  shops                VendorShop[]
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  user                 User?              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId               String?
  BillingAddresses     BillingAddresses[]
  ShippingAddress      ShippingAddress[]
}

model ShopCategory {
  id         String       @id @unique @default(uuid())
  name       String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  VendorShop VendorShop[]
}

// VendorShop model representing the relationship between vendors and shop categories
model VendorShop {
  id              String   @id @unique @default(uuid())
  shopName        String
  shopDescription String?
  shopLogo        String?
  houseNo         String?
  street          String?
  landmark        String?
  pincode         Int?
  city            String?
  state           String?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relation to Vendor model
  vendor   Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  vendorId String

  // Relation to ShopCategory model
  ShopCategory   ShopCategory @relation(fields: [ShopCategoryId], references: [id], onDelete: Cascade)
  ShopCategoryId String

  // Relation to Product model
  Product Product[]
}

// Categories model
model Categories {
  id        String    @id @unique @default(uuid())
  catName   String
  image     String
  isActive  Boolean   @default(true)
  product   Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// Product model
model Product {
  id              String         @id @unique @default(uuid())
  productTitle    String         @unique
  description     String
  price           Int
  rating          Float?
  sku             String
  thumbnail       String
  discountPrice   Int?
  styleCode       String
  fabric          String?
  wash            String?
  fit             String?
  isActive        Boolean        @default(true)
  bannerImage     String?
  isbannerImage   Boolean        @default(false)
  featuredProduct Boolean        @default(false)
  sizeChart       String?
  // Relation to Categories model
  categories      Categories     @relation(fields: [categoriesId], references: [id], onDelete: Cascade)
  categoriesId    String
  productImage    String[]
  MyCart          MyCart[]
  MyOrder         MyOrder[]
  ProductStock    ProductStock[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  VendorShop      VendorShop?    @relation(fields: [vendorShopId], references: [id], onDelete: Cascade)
  vendorShopId    String?
}

// ProductStock model
model ProductStock {
  id        String    @id @unique @default(uuid())
  // Relation to Product model
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  size      String
  color     String
  quantity  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  MyCart    MyCart[]
  MyOrder   MyOrder[]
}

// MyCart model
model MyCart {
  id             String       @id @unique @default(uuid())
  quantity       Int          @default(0)
  customerId     String
  productId      String
  // Relation to Product model
  product        Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  productStock   ProductStock @relation(fields: [productStockId], references: [id], onDelete: Cascade)
  productStockId String
  // Relation to Customer model
  customer       Customer     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  addedAt        DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

// Enum defining order status
enum OrderStatus {
  INPROCESS
  ORDER_CONFIRM
  READY_TO_SHIP
  SHIPPED
  OUT_FOR_DELIVERY
  DELIVERED
  RETURN
  REFUND
}

// Enum defining payment status
enum PaymentStatus {
  PENDING
  DONE
}

// MyOrder model
model MyOrder {
  id                    String           @id @unique @default(uuid())
  status                OrderStatus      @default(INPROCESS)
  paymentStatus         PaymentStatus    @default(PENDING)
  orderCancelRequest    Boolean          @default(false)
  orderReturnRequest    Boolean          @default(false)
  orderReturnConfirm    Boolean          @default(false)
  orderReturnReason     String?
  orderReturnDesc       String?
  orderReturnAttachment String?
  // Relation to ProductStock model
  productStock          ProductStock     @relation(fields: [productStockId], references: [id], onDelete: Cascade)
  productStockId        String
  productQuantity       Int
  customerId            String
  // Relation to Customer model
  customer              Customer         @relation(fields: [customerId], references: [id], onDelete: Cascade)
  productList           Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId             String
  subTotal              Int
  shipRocketOrderId     String?
  shipRocketShipmentId  String?
  shipRocketTrackId     String?
  shipRocketCourierId   String?
  shipRocketAWBId       String?
  // Relation to BillingAddresses model
  billingAddress        BillingAddresses @relation(fields: [billingAddressId], references: [id], onDelete: Cascade)
  billingAddressId      String
  // Relation to ShippingAddress model
  shippingAddress       ShippingAddress  @relation(fields: [shippingAddressId], references: [id], onDelete: Cascade)
  shippingAddressId     String
  orderOn               DateTime         @default(now())
  updatedOn             DateTime         @updatedAt
}

// BillingAddresses model
model BillingAddresses {
  id         String    @id @unique @default(uuid())
  fullName   String
  phone      Decimal
  houseNo    String?
  street     String?
  landmark   String?
  address    String?
  pincode    Int
  city       String
  state      String
  // Relation to Customer model
  customer   Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String
  MyOrder    MyOrder[]
  Vendor     Vendor?   @relation(fields: [vendorId], references: [id])
  vendorId   String?
}

// ShippingAddress model
model ShippingAddress {
  id         String    @id @unique @default(uuid())
  fullName   String
  phone      Decimal
  houseNo    String?
  street     String?
  address    String
  landmark   String?
  pincode    Int
  city       String
  state      String
  // Relation to Customer model
  customer   Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String
  MyOrder    MyOrder[]
  Vendor     Vendor?   @relation(fields: [vendorId], references: [id])
  vendorId   String?
}
